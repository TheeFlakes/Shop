<script>
	import { onMount } from 'svelte';
	import { pb } from '$lib/pocketbase.js';
	import { Chart, registerables } from 'chart.js';

	// Register Chart.js components
	Chart.register(...registerables);

	// CRM data
	let crmData = {
		totalCustomers: 0,
		newCustomersThisMonth: 0,
		activeCustomers: 0,
		averageOrderValue: 0,
		customerLifetimeValue: 0,
		topCustomers: [],
		recentCustomers: [],
		customerGrowth: [],
		customerSegments: {
			new: 0,
			returning: 0,
			vip: 0,
			inactive: 0
		}
	};

	let customers = [];
	let filteredCustomers = [];
	let loading = true;
	let searchTerm = '';
	let selectedCustomer = null;
	let showCustomerModal = false;
	let customerOrders = [];

	// Charts
	let customerGrowthChart = null;
	let segmentChart = null;

	// Pagination
	let currentPage = 1;
	let itemsPerPage = 10;
	let totalPages = 1;

	onMount(async () => {
		await loadCRMData();
		createCharts();
		loading = false;
	});

	async function loadCRMData() {
		try {
			// Load all customers
			const customersResponse = await pb.collection('users').getFullList({
				filter: 'role = "customer"',
				sort: '-created'
			});
			customers = customersResponse;
			filteredCustomers = customers;
			updatePagination();

			// Load all orders for analytics
			const orders = await pb.collection('orders').getFullList({
				expand: 'customer'
			});

			// Calculate CRM metrics
			calculateCRMMetrics(customers, orders);
		} catch (error) {
			console.error('Error loading CRM data:', error);
		}
	}

	function calculateCRMMetrics(customers, orders) {
		const now = new Date();
		const thisMonth = new Date(now.getFullYear(), now.getMonth(), 1);
		
		// Basic customer metrics
		crmData.totalCustomers = customers.length;
		crmData.newCustomersThisMonth = customers.filter(customer => 
			new Date(customer.created) >= thisMonth
		).length;

		// Customer order analysis
		const customerOrderMap = new Map();
		let totalRevenue = 0;

		orders.forEach(order => {
			const customerId = order.customer;
			if (!customerOrderMap.has(customerId)) {
				customerOrderMap.set(customerId, {
					orderCount: 0,
					totalSpent: 0,
					lastOrderDate: null,
					orders: []
				});
			}
			
			const customerData = customerOrderMap.get(customerId);
			customerData.orderCount++;
			customerData.totalSpent += parseFloat(order.total || 0);
			customerData.orders.push(order);
			
			const orderDate = new Date(order.created);
			if (!customerData.lastOrderDate || orderDate > customerData.lastOrderDate) {
				customerData.lastOrderDate = orderDate;
			}
			
			totalRevenue += parseFloat(order.total || 0);
		});

		// Calculate averages
		crmData.averageOrderValue = orders.length > 0 ? totalRevenue / orders.length : 0;
		crmData.customerLifetimeValue = customers.length > 0 ? totalRevenue / customers.length : 0;

		// Active customers (ordered in last 30 days)
		const thirtyDaysAgo = new Date();
		thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
		
		crmData.activeCustomers = Array.from(customerOrderMap.values()).filter(data => 
			data.lastOrderDate && data.lastOrderDate >= thirtyDaysAgo
		).length;

		// Top customers by total spent
		crmData.topCustomers = customers.map(customer => {
			const orderData = customerOrderMap.get(customer.id) || { orderCount: 0, totalSpent: 0 };
			return {
				...customer,
				orderCount: orderData.orderCount,
				totalSpent: orderData.totalSpent,
				lastOrderDate: orderData.lastOrderDate
			};
		}).sort((a, b) => b.totalSpent - a.totalSpent).slice(0, 10);

		// Recent customers
		crmData.recentCustomers = customers.slice(0, 5);

		// Customer segments
		customers.forEach(customer => {
			const orderData = customerOrderMap.get(customer.id);
			const customerAge = (now - new Date(customer.created)) / (1000 * 60 * 60 * 24); // days
			
			if (!orderData || orderData.orderCount === 0) {
				crmData.customerSegments.inactive++;
			} else if (customerAge <= 30) {
				crmData.customerSegments.new++;
			} else if (orderData.totalSpent > 500) {
				crmData.customerSegments.vip++;
			} else {
				crmData.customerSegments.returning++;
			}
		});

		// Customer growth data (last 6 months)
		const growthData = [];
		for (let i = 5; i >= 0; i--) {
			const monthDate = new Date(now.getFullYear(), now.getMonth() - i, 1);
			const nextMonth = new Date(now.getFullYear(), now.getMonth() - i + 1, 1);
			
			const monthCustomers = customers.filter(customer => {
				const createdDate = new Date(customer.created);
				return createdDate >= monthDate && createdDate < nextMonth;
			}).length;
			
			growthData.push({
				month: monthDate.toLocaleDateString('en-US', { month: 'short', year: 'numeric' }),
				count: monthCustomers
			});
		}
		crmData.customerGrowth = growthData;
	}

	function createCharts() {
		// Customer Growth Chart
		const growthCtx = document.getElementById('customerGrowthChart');
		if (growthCtx && crmData.customerGrowth.length > 0) {
			customerGrowthChart = new Chart(growthCtx, {
				type: 'line',
				data: {
					labels: crmData.customerGrowth.map(item => item.month),
					datasets: [{
						label: 'New Customers',
						data: crmData.customerGrowth.map(item => item.count),
						borderColor: 'rgb(59, 130, 246)',
						backgroundColor: 'rgba(59, 130, 246, 0.1)',
						tension: 0.4,
						fill: true
					}]
				},
				options: {
					responsive: true,
					maintainAspectRatio: false,
					plugins: {
						legend: {
							display: false
						}
					},
					scales: {
						y: {
							beginAtZero: true,
							ticks: {
								stepSize: 1
							}
						}
					}
				}
			});
		}

		// Customer Segments Chart
		const segmentCtx = document.getElementById('segmentChart');
		if (segmentCtx) {
			segmentChart = new Chart(segmentCtx, {
				type: 'doughnut',
				data: {
					labels: ['New', 'Returning', 'VIP', 'Inactive'],
					datasets: [{
						data: [
							crmData.customerSegments.new,
							crmData.customerSegments.returning,
							crmData.customerSegments.vip,
							crmData.customerSegments.inactive
						],
						backgroundColor: [
							'rgb(34, 197, 94)',
							'rgb(59, 130, 246)',
							'rgb(168, 85, 247)',
							'rgb(156, 163, 175)'
						]
					}]
				},
				options: {
					responsive: true,
					maintainAspectRatio: false,
					plugins: {
						legend: {
							position: 'bottom'
						}
					}
				}
			});
		}
	}

	function searchCustomers() {
		if (!searchTerm.trim()) {
			filteredCustomers = customers;
		} else {
			filteredCustomers = customers.filter(customer =>
				customer.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
				customer.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||
				customer.phone?.toString().includes(searchTerm)
			);
		}
		currentPage = 1;
		updatePagination();
	}

	function updatePagination() {
		totalPages = Math.ceil(filteredCustomers.length / itemsPerPage);
	}

	function getPaginatedCustomers() {
		const start = (currentPage - 1) * itemsPerPage;
		const end = start + itemsPerPage;
		return filteredCustomers.slice(start, end);
	}

	function goToPage(page) {
		if (page >= 1 && page <= totalPages) {
			currentPage = page;
		}
	}

	async function viewCustomerDetails(customer) {
		selectedCustomer = customer;
		
		// Load customer orders
		try {
			customerOrders = await pb.collection('orders').getFullList({
				filter: `customer = "${customer.id}"`,
				sort: '-created',
				expand: 'items'
			});
		} catch (error) {
			console.error('Error loading customer orders:', error);
			customerOrders = [];
		}
		
		showCustomerModal = true;
	}

	function closeCustomerModal() {
		showCustomerModal = false;
		selectedCustomer = null;
		customerOrders = [];
	}

	function formatCurrency(amount) {
		return new Intl.NumberFormat('en-US', {
			style: 'currency',
			currency: 'USD'
		}).format(amount || 0);
	}

	function formatDate(dateString) {
		return new Date(dateString).toLocaleDateString('en-US', {
			year: 'numeric',
			month: 'short',
			day: 'numeric'
		});
	}
</script>

<svelte:head>
	<title>CRM - Customer Management</title>
</svelte:head>

<div class="p-6 max-w-7xl mx-auto">
	<div class="mb-6">
		<h1 class="text-3xl font-bold text-gray-900 mb-2">Customer Relationship Management</h1>
		<p class="text-gray-600">Manage and analyze your customer relationships</p>
	</div>

	{#if loading}
		<div class="flex justify-center items-center h-64">
			<div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
		</div>
	{:else}
		<!-- CRM Metrics -->
		<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
			<div class="bg-white rounded-lg shadow p-6">
				<div class="flex items-center">
					<div class="p-2 bg-blue-100 rounded-lg">
						<svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
						</svg>
					</div>
					<div class="ml-4">
						<p class="text-sm font-medium text-gray-600">Total Customers</p>
						<p class="text-2xl font-bold text-gray-900">{crmData.totalCustomers}</p>
					</div>
				</div>
			</div>

			<div class="bg-white rounded-lg shadow p-6">
				<div class="flex items-center">
					<div class="p-2 bg-green-100 rounded-lg">
						<svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z" />
						</svg>
					</div>
					<div class="ml-4">
						<p class="text-sm font-medium text-gray-600">New This Month</p>
						<p class="text-2xl font-bold text-gray-900">{crmData.newCustomersThisMonth}</p>
					</div>
				</div>
			</div>

			<div class="bg-white rounded-lg shadow p-6">
				<div class="flex items-center">
					<div class="p-2 bg-purple-100 rounded-lg">
						<svg class="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
						</svg>
					</div>
					<div class="ml-4">
						<p class="text-sm font-medium text-gray-600">Active Customers</p>
						<p class="text-2xl font-bold text-gray-900">{crmData.activeCustomers}</p>
					</div>
				</div>
			</div>

			<div class="bg-white rounded-lg shadow p-6">
				<div class="flex items-center">
					<div class="p-2 bg-yellow-100 rounded-lg">
						<svg class="w-6 h-6 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1" />
						</svg>
					</div>
					<div class="ml-4">
						<p class="text-sm font-medium text-gray-600">Avg. Lifetime Value</p>
						<p class="text-2xl font-bold text-gray-900">{formatCurrency(crmData.customerLifetimeValue)}</p>
					</div>
				</div>
			</div>
		</div>

		<!-- Charts Row -->
		<div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
			<div class="bg-white rounded-lg shadow p-6">
				<h3 class="text-lg font-semibold text-gray-900 mb-4">Customer Growth</h3>
				<div class="h-64">
					<canvas id="customerGrowthChart"></canvas>
				</div>
			</div>

			<div class="bg-white rounded-lg shadow p-6">
				<h3 class="text-lg font-semibold text-gray-900 mb-4">Customer Segments</h3>
				<div class="h-64">
					<canvas id="segmentChart"></canvas>
				</div>
			</div>
		</div>

		<!-- Top Customers -->
		<div class="bg-white rounded-lg shadow p-6 mb-8">
			<h3 class="text-lg font-semibold text-gray-900 mb-4">Top Customers by Revenue</h3>
			<div class="overflow-x-auto">
				<table class="min-w-full divide-y divide-gray-200">
					<thead class="bg-gray-50">
						<tr>
							<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Customer</th>
							<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Total Spent</th>
							<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Orders</th>
							<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Last Order</th>
							<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
						</tr>
					</thead>
					<tbody class="bg-white divide-y divide-gray-200">
						{#each crmData.topCustomers.slice(0, 5) as customer}
							<tr>
								<td class="px-6 py-4 whitespace-nowrap">
									<div class="flex items-center">
										<div class="flex-shrink-0 h-10 w-10">
											<div class="h-10 w-10 rounded-full bg-gray-300 flex items-center justify-center">
												<span class="text-sm font-medium text-gray-700">
													{customer.name ? customer.name.charAt(0).toUpperCase() : 'U'}
												</span>
											</div>
										</div>
										<div class="ml-4">
											<div class="text-sm font-medium text-gray-900">{customer.name || 'Unknown'}</div>
											<div class="text-sm text-gray-500">{customer.email}</div>
										</div>
									</div>
								</td>
								<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
									{formatCurrency(customer.totalSpent)}
								</td>
								<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
									{customer.orderCount}
								</td>
								<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
									{customer.lastOrderDate ? formatDate(customer.lastOrderDate) : 'Never'}
								</td>
								<td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
									<button 
										on:click={() => viewCustomerDetails(customer)}
										class="text-blue-600 hover:text-blue-900">
										View Details
									</button>
								</td>
							</tr>
						{/each}
					</tbody>
				</table>
			</div>
		</div>

		<!-- Customer List -->
		<div class="bg-white rounded-lg shadow">
			<div class="px-6 py-4 border-b border-gray-200">
				<div class="flex flex-col sm:flex-row sm:items-center sm:justify-between">
					<h3 class="text-lg font-semibold text-gray-900">All Customers</h3>
					<div class="mt-3 sm:mt-0">
						<input
							type="text"
							bind:value={searchTerm}
							on:input={searchCustomers}
							placeholder="Search customers..."
							class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
						/>
					</div>
				</div>
			</div>

			<div class="overflow-x-auto">
				<table class="min-w-full divide-y divide-gray-200">
					<thead class="bg-gray-50">
						<tr>
							<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Customer</th>
							<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Phone</th>
							<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Joined</th>
							<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
							<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
						</tr>
					</thead>
					<tbody class="bg-white divide-y divide-gray-200">
						{#each getPaginatedCustomers() as customer}
							<tr>
								<td class="px-6 py-4 whitespace-nowrap">
									<div class="flex items-center">
										<div class="flex-shrink-0 h-10 w-10">
											<div class="h-10 w-10 rounded-full bg-gray-300 flex items-center justify-center">
												<span class="text-sm font-medium text-gray-700">
													{customer.name ? customer.name.charAt(0).toUpperCase() : 'U'}
												</span>
											</div>
										</div>
										<div class="ml-4">
											<div class="text-sm font-medium text-gray-900">{customer.name || 'Unknown'}</div>
											<div class="text-sm text-gray-500">{customer.email}</div>
										</div>
									</div>
								</td>
								<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
									{customer.phone || 'N/A'}
								</td>
								<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
									{formatDate(customer.created)}
								</td>
								<td class="px-6 py-4 whitespace-nowrap">
									<span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800">
										Active
									</span>
								</td>
								<td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
									<button 
										on:click={() => viewCustomerDetails(customer)}
										class="text-blue-600 hover:text-blue-900">
										View Details
									</button>
								</td>
							</tr>
						{/each}
					</tbody>
				</table>
			</div>

			<!-- Pagination -->
			{#if totalPages > 1}
				<div class="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6">
					<div class="flex-1 flex justify-between sm:hidden">
						<button
							on:click={() => goToPage(currentPage - 1)}
							disabled={currentPage === 1}
							class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50">
							Previous
						</button>
						<button
							on:click={() => goToPage(currentPage + 1)}
							disabled={currentPage === totalPages}
							class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50">
							Next
						</button>
					</div>
					<div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
						<div>
							<p class="text-sm text-gray-700">
								Showing
								<span class="font-medium">{(currentPage - 1) * itemsPerPage + 1}</span>
								to
								<span class="font-medium">{Math.min(currentPage * itemsPerPage, filteredCustomers.length)}</span>
								of
								<span class="font-medium">{filteredCustomers.length}</span>
								results
							</p>
						</div>
						<div>
							<nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px">
								<button
									on:click={() => goToPage(currentPage - 1)}
									disabled={currentPage === 1}
									class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50">
									Previous
								</button>
								{#each Array(totalPages) as _, i}
									<button
										on:click={() => goToPage(i + 1)}
										class="relative inline-flex items-center px-4 py-2 border text-sm font-medium {currentPage === i + 1 ? 'z-10 bg-blue-50 border-blue-500 text-blue-600' : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50'}">
										{i + 1}
									</button>
								{/each}
								<button
									on:click={() => goToPage(currentPage + 1)}
									disabled={currentPage === totalPages}
									class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50">
									Next
								</button>
							</nav>
						</div>
					</div>
				</div>
			{/if}
		</div>
	{/if}
</div>

<!-- Customer Details Modal -->
{#if showCustomerModal && selectedCustomer}
	<div class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
		<div class="relative top-20 mx-auto p-5 border w-11/12 md:w-3/4 lg:w-1/2 shadow-lg rounded-md bg-white">
			<div class="flex items-center justify-between mb-4">
				<h3 class="text-lg font-semibold text-gray-900">Customer Details</h3>
				<button on:click={closeCustomerModal} class="text-gray-400 hover:text-gray-600" aria-label="Close modal">
					<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
					</svg>
				</button>
			</div>

			<div class="space-y-6">
				<!-- Customer Info -->
				<div>
					<h4 class="text-md font-medium text-gray-900 mb-2">Customer Information</h4>
					<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
						<div>
							<label class="block text-sm font-medium text-gray-700">Name</label>
							<p class="text-sm text-gray-900">{selectedCustomer.name || 'N/A'}</p>
						</div>
						<div>
							<label class="block text-sm font-medium text-gray-700">Email</label>
							<p class="text-sm text-gray-900">{selectedCustomer.email}</p>
						</div>
						<div>
							<label class="block text-sm font-medium text-gray-700">Phone</label>
							<p class="text-sm text-gray-900">{selectedCustomer.phone || 'N/A'}</p>
						</div>
						<div>
							<label class="block text-sm font-medium text-gray-700">Joined</label>
							<p class="text-sm text-gray-900">{formatDate(selectedCustomer.created)}</p>
						</div>
					</div>
				</div>

				<!-- Order History -->
				<div>
					<h4 class="text-md font-medium text-gray-900 mb-2">Order History</h4>
					{#if customerOrders.length > 0}
						<div class="overflow-x-auto">
							<table class="min-w-full divide-y divide-gray-200">
								<thead class="bg-gray-50">
									<tr>
										<th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Order ID</th>
										<th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Date</th>
										<th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Total</th>
										<th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Status</th>
									</tr>
								</thead>
								<tbody class="bg-white divide-y divide-gray-200">
									{#each customerOrders as order}
										<tr>
											<td class="px-4 py-2 text-sm text-gray-900">#{order.id.slice(-8)}</td>
											<td class="px-4 py-2 text-sm text-gray-500">{formatDate(order.created)}</td>
											<td class="px-4 py-2 text-sm text-gray-900">{formatCurrency(order.total)}</td>
											<td class="px-4 py-2">
												<span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800">
													{order.status || 'Completed'}
												</span>
											</td>
										</tr>
									{/each}
								</tbody>
							</table>
						</div>
					{:else}
						<p class="text-gray-500 text-sm">No orders found for this customer.</p>
					{/if}
				</div>
			</div>
		</div>
	</div>
{/if}
